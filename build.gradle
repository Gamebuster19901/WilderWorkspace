plugins {
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.fabricmc.net/"
    }
    maven {
        url "https://maven.wildermods.com/"
    }
}

version = workspaceVersion
group = "com.wildermods"
archivesBaseName = "workspace"

sourceCompatibility = '17'
targetCompatibility = '17'

dependencies {
    gradleApi()
    implementation libs.commons.lang
    implementation group: 'org.apache.commons', name: 'commons-text', version: commonsTextVersion
    implementation group: 'commons-io', name: 'commons-io', version: commonsIOVersion
    implementation group: 'net.fabricmc', name: 'fabric-loom', version: loomVersion
    implementation group: 'org.vineflower', name: 'vineflower', version: vineFlowerVersion
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
}

import org.apache.tools.ant.filters.ReplaceTokens

task processSource(type: Sync) {
    from sourceSets.main.java.srcDirs
    into "$buildDir/processedSrc"
 
 	// DEBUG CODE TO VIEW AVAILABLE METHODS - DO NOT REMOVE
 	/*   
    logger.lifecycle("Available versions:")
    libs.versions.properties.each { key, value ->
        logger.lifecycle("$key -> $value")
        value.properties.each { key2, value2 ->
            logger.lifecycle("$key -> $value -> [$key2 -> $value2]")

            // Check if value2 is not null before accessing its methods and properties
            if (value2 != null) {
                // Print the full method signatures for value2
                logger.lifecycle("Methods for $value2:")
                value2.metaClass.methods.each { method ->
                    // Get the method name and parameter types
                    def methodSignature = "${method.name}(${method.parameterTypes*.name.join(', ')}) -> ${method.returnType.name}"
                    logger.lifecycle("Method Signature: $methodSignature")
                }

                // Optionally, print properties as well (if needed)
                value2.metaClass.properties.each { property ->
                    logger.lifecycle("Property: ${property.name}")
                }
            } else {
                logger.lifecycle("value2 is null for $key2")
            }
        }
    }
    */
    
    //The version of the WilderWorkspace gradle plugin
    inputs.property 'workspaceVersion', workspaceVersion
    
    inputs.property 'providerVersion', libs.versions.provider.version
    inputs.property 'fabricLoaderVersion', libs.versions.fabric.loader.version
    
    //dependencies for building and running WilderWorkspace gradle plugin itself
    inputs.property 'commonsIOVersion', libs.versions.commons.io.version
    inputs.property 'commonsLangVersion', libs.versions.commons.Lang.version
    inputs.property 'commonsTextVersion', libs.versions.commons.Text.version
    inputs.property 'vineFlowerVersion', libs.versions.vineflower.version
    inputs.property 'loomVersion', libs.versions.fabric.Loom.version
    
    //transitive dependencies
    inputs.property 'log4jVersion', libs.versions.log4j.version
    
    filter(ReplaceTokens, tokens: [
        //The version of the WilderWorkspace gradle plugin
        workspaceVersion: workspaceVersion, 
        
        //dependencies that projects using WilderWorkspace will need in order to mod Wildermyth
        providerVersion: providerVersion,
        fabricLoaderVersion: fabricLoaderVersion,
        
        //dependencies for building and running WilderWorkspace gradle plugin itself
        commonsIOVersion: commonsIOVersion,
        commonsLangVersion: commonsLangVersion,
        commonsTextVersion: commonsTextVersion,
        vineFlowerVersion: vineFlowerVersion,
        loomVersion: loomVersion,
        
        //transitive dependencies
        log4jVersion: log4jVersion
    ])
}

compileJava {
    source = fileTree(dir: "$buildDir/processedSrc", include: '**/*.java')
    dependsOn processSource
}

ext.mavenLocalUrl = repositories.mavenLocal().url.toString()

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

tasks.register('checkArtifactExists') {
    doLast {
        def repoUrl = project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl
        def artifactPath = "${repoUrl}/${project.group.replace('.', '/')}/com/wildermods/workspace/gradle/plugin/${project.version}/workspace-${project.version}.jar"
        logger.lifecycle("Checking if artifact exists at: $artifactPath")
        
        if (artifactPath.startsWith('file:/')) {
            def file = new File(new URI(artifactPath))
            if (file.exists()) {
                throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        } else {
            def url = new URL(artifactPath)
            def connection = url.openConnection()
            connection.setRequestMethod('HEAD')
            if (connection.responseCode == 200) {
                throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        }
        logger.lifecycle("Artifact does not exist, proceeding with publish.")
    }
}

tasks.named('publish') {
    dependsOn 'checkArtifactExists'
}


tasks.withType(PublishToMavenRepository).configureEach {
    if (it.name.equals("publishPluginMavenPublicationToMavenRepository")) {
        logger.lifecycle("Disabling task: ${it.name}")
        it.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group + ".workspace"
            artifactId = 'com.wildermods.workspace.gradle.plugin'  // Set the expected plugin artifact ID
            version = project.version

            // Attach sources JAR to the publication
            artifact sourceJar
        }
    }

    repositories {
        maven {
            url = uri(project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl) // Default to mavenLocal if no custom URL is provided
        }
    }
}
